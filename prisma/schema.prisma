generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("NEON_DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String  @id @default(uuid())
  username      String  @unique
  password      String
  email         String
  pets          Pet[]
  wallet        Wallet?
  task          Task[]
  collectedPets Int[] // Array of pokedexIds
}

model Wallet {
  id     String @id @default(uuid())
  coin   Int    @default(0)
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pet {
  id        String   @id @default(uuid())
  name      String //species
  nickname  String //user given name
  type      String
  pokedexId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  spriteUrl String?
  cost      Int      @default(0)
  hearts    Int      @default(1)
  task      Task[]
  createdAt DateTime @default(now())
  isRare    Boolean  @default(false)
  isShiny   Boolean  @default(false)
  isPaused  Boolean  @default(false)
  isActive  Boolean  @default(true)
}

model Task {
  id          String   @id @default(uuid())
  name        String
  category    String?
  isCompleted Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId       String
  worth       Int      @default(0)
  dueDate     DateTime @default(now())
  createdAt   DateTime @default(now())
  isBonus     Boolean  @default(false)
}
